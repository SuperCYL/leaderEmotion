{"queryPath":"/bubble.js","absPath":"/Users/caoyanling/Desktop/companyProject/bigScreen/leaderEmotion/bubble.js","realPath":"/bubble.js","type":"script","source":"/*\n* 3d鏍囩浜�\n* 鍔熻兘锛氶紶鏍囩Щ鍏ユ爣绛撅紝褰撳墠鏍囩闈欐鏀惧ぇ\n* 璇存槑锛�\n* */\n\nwindow.tagcloud = (function(win, doc) { // ns\n    // 鍒ゆ柇瀵硅薄\n    function isObject (obj) {\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    // 鏋勯€犲嚱鏁�\n    function TagCloud (options) {\n        var self = this;\n\n        self.config = TagCloud._getConfig(options);\n        self.box = self.config.element;   //缁勪欢鍏冪礌\n        self.fontsize = self.config.fontsize; //骞冲潎瀛椾綋澶у皬\n        self.radius = self.config.radius; //婊氬姩鍗婂緞\n        self.depth = 2 * self.radius;   //婊氬姩娣卞害\n        self.size = 2 * self.radius;    //闅忛紶鏍囨粴鍔ㄥ彉閫熶綔鐢ㄥ尯鍩�\n\n        self.mspeed = TagCloud._getMsSpeed(self.config.mspeed);\n        self.ispeed = TagCloud._getIsSpeed(self.config.ispeed);\n        self.items = self._getItems();\n\n        self.direction = self.config.direction;   //鍒濆婊氬姩鏂瑰悜\n        self.keep = self.config.keep; //榧犳爣绉诲嚭鍚庢槸鍚︿繚鎸佷箣鍓嶆粴鍔�\n\n        //鍒濆鍖�\n        self.active = false;   //鏄惁涓烘縺娲荤姸鎬�\n        self.lasta = 1;\n        self.lastb = 1;\n        self.mouseX0 = self.ispeed * Math.sin(self.direction * Math.PI / 180);    //榧犳爣涓庢粴鍔ㄥ渾蹇儀杞村垵濮嬭窛绂�\n        self.mouseY0 = -self.ispeed * Math.cos(self.direction * Math.PI / 180);   //榧犳爣涓庢粴鍔ㄥ渾蹇儁杞村垵濮嬭窛绂�\n        self.mouseX = self.mouseX0;   //榧犳爣涓庢粴鍔ㄥ渾蹇儀杞磋窛绂�\n        self.mouseY = self.mouseY0;   //榧犳爣涓庢粴鍔ㄥ渾蹇儁杞磋窛绂�\n        self.index = -1;\n\n        //榧犳爣绉诲叆\n        TagCloud._on(self.box, 'mouseover', function () {\n            self.active = true;\n        });\n        //榧犳爣绉诲嚭\n        TagCloud._on(self.box, 'mouseout', function () {\n            self.active = false;\n        });\n\n        //榧犳爣鍦ㄥ唴绉诲姩\n        TagCloud._on(self.keep ? win : self.box, 'mousemove', function (ev) {\n            var oEvent = win.event || ev;\n            var boxPosition = self.box.getBoundingClientRect();\n            self.mouseX = (oEvent.clientX - (boxPosition.left + self.box.offsetWidth / 2)) / 5;\n            self.mouseY = (oEvent.clientY - (boxPosition.top + self.box.offsetHeight / 2)) / 5;\n        });\n\n        for (var j = 0, len = self.items.length; j < len; j++) {\n            self.items[j].element.index=j;\n\n            //榧犳爣绉诲嚭瀛愬厓绱�,褰撳墠鍏冪礌闈欐鏀惧ぇ\n            self.items[j].element.onmouseover = function(){\n                self.index = this.index;\n            };\n\n            //榧犳爣绉诲嚭瀛愬厓绱�,褰撳墠鍏冪礌缁х画婊氬姩\n            self.items[j].element.onmouseout = function(){\n                self.index = -1;\n            };\n        }\n\n        //瀹氭椂鏇存柊\n        TagCloud.boxs.push(self.box);\n        self.update(self);    //鍒濆鏇存柊\n        self.box.style.visibility = \"visible\";\n        self.box.style.position = \"relative\";\n        self.box.style.minHeight = 1.2 * self.size + \"px\";\n        self.box.style.minWidth = 2.5 * self.size + \"px\";\n        for (var j = 0, len = self.items.length; j < len; j++) {\n            self.items[j].element.style.position = \"absolute\";\n            self.items[j].element.style.zIndex = j + 1;\n        }\n        self.up = setInterval(function() {\n            self.update(self);\n        }, 10);\n    }\n\n    //瀹炰緥\n    TagCloud.boxs = []; //瀹炰緥鍏冪礌鏁扮粍\n    // 闈欐€佹柟娉曚滑\n    TagCloud._set = function (element) {\n        if (TagCloud.boxs.indexOf(element) == -1) {//ie8涓嶆敮鎸佹暟缁勭殑indexOf鏂规硶\n            return true;\n        }\n    };\n\n    //娣诲姞鏁扮粍IndexOf鏂规硶\n    if (!Array.prototype.indexOf){\n        Array.prototype.indexOf = function(elt /*, from*/){\n            var len = this.length >>> 0;\n            var from = Number(arguments[1]) || 0;\n            from = (from < 0)\n                ? Math.ceil(from)\n                : Math.floor(from);\n            if (from < 0)\n                from += len;\n\n            for (; from < len; from++){\n                if (from in this && this[from] === elt)\n                    return from;\n            }\n            return -1;\n        };\n    }\n\n\n    TagCloud._getConfig = function (config) {\n        var defaultConfig = {   //榛樿鍊�\n            fontsize: 16,       //鍩烘湰瀛椾綋澶у皬, 鍗曚綅px\n            radius: 60,         //婊氬姩鍗婂緞, 鍗曚綅px\n            mspeed: \"normal\",   //婊氬姩鏈€澶ч€熷害, 鍙栧€�: slow, normal(榛樿), fast\n            ispeed: \"normal\",   //婊氬姩鍒濋€熷害, 鍙栧€�: slow, normal(榛樿), fast\n            direction: 135,     //鍒濆婊氬姩鏂瑰悜, 鍙栧€艰搴�(椤烘椂閽�360): 0瀵瑰簲top, 90瀵瑰簲left, 135瀵瑰簲right-bottom(榛樿)...\n            keep: true          //榧犳爣绉诲嚭缁勪欢鍚庢槸鍚︾户缁殢榧犳爣婊氬姩, 鍙栧€�: false, true(榛樿) 瀵瑰簲 鍑忛€熻嚦鍒濋€熷害婊氬姩, 闅忛紶鏍囨粴鍔�\n        };\n\n        if(isObject(config)) {\n            for(var i in config) {\n                if(config.hasOwnProperty(i)) {//hasOwnProperty()鐢ㄦ潵鍒ゆ柇涓€涓睘鎬ф槸瀹氫箟鍦ㄥ璞℃湰韬€屼笉鏄户鎵胯嚜鍘熷瀷閾�\n                    defaultConfig[i] = config[i]; //鐢ㄦ埛閰嶇疆\n                }\n            }\n        }\n\n        return defaultConfig;// 閰嶇疆 Merge\n    };\n    TagCloud._getMsSpeed = function (mspeed) {    //婊氬姩鏈€澶ч€熷害\n        var speedMap = {\n            slow: 1, \n            normal: 3,\n            fast: 5\n        };\n        return speedMap[mspeed] || 3;\n    };\n    TagCloud._getIsSpeed = function (ispeed) {    //婊氬姩鍒濋€熷害\n        var speedMap = {\n            slow: 10,\n            normal: 25,\n            fast: 50\n        };\n        return speedMap[ispeed] || 25;\n    };\n    TagCloud._getSc = function(a, b) {\n        var l = Math.PI / 180;\n        //鏁扮粍椤哄簭0,1,2,3琛ㄧずasin,acos,bsin,bcos\n        return [\n            Math.sin(a * l),\n            Math.cos(a * l),\n            Math.sin(b * l),\n            Math.cos(b * l)\n        ];\n    };\n\n    TagCloud._on = function (ele, eve, handler, cap) {\n        if (ele.addEventListener) {\n            ele.addEventListener(eve, handler, cap);\n        } else if (ele.attachEvent) {\n            ele.attachEvent('on' + eve, handler);\n        } else {\n            ele['on' + eve] = handler;\n        }\n    };\n\n    // 鍘熷瀷鏂规硶\n    TagCloud.prototype = {\n        constructor: TagCloud, // 鍙嶅悜寮曠敤鏋勯€犲櫒\n\n        update: function () {\n            var self = this, a, b;\n\n            if (!self.active && !self.keep) {\n                self.mouseX = Math.abs(self.mouseX - self.mouseX0) < 1 ? self.mouseX0 : (self.mouseX + self.mouseX0) / 2;   //閲嶇疆榧犳爣涓庢粴鍔ㄥ渾蹇儀杞磋窛绂�\n                self.mouseY = Math.abs(self.mouseY - self.mouseY0) < 1 ? self.mouseY0 : (self.mouseY + self.mouseY0) / 2;   //閲嶇疆榧犳爣涓庢粴鍔ㄥ渾蹇儁杞磋窛绂�\n            }\n\n            a = -(Math.min(Math.max(-self.mouseY, -self.size), self.size) / self.radius ) * self.mspeed;\n            b = (Math.min(Math.max(-self.mouseX, -self.size), self.size) / self.radius ) * self.mspeed;\n            \n            if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01) { return; }\n\n            self.lasta = a;\n            self.lastb = b;\n\n            var sc = TagCloud._getSc(a, b);\n\n            for (var j = 0, len = self.items.length; j < len; j++) {\n\n                var rx1 = self.items[j].x,\n                    ry1 = self.items[j].y*sc[1] + self.items[j].z*(-sc[0]),\n                    rz1 = self.items[j].y*sc[0] + self.items[j].z*sc[1];\n\n                var rx2 = rx1 * sc[3] + rz1 * sc[2],\n                    ry2 = ry1,\n                    rz2 = rz1 * sc[3] - rx1 * sc[2];\n\n                if(self.index==j){\n\n                    self.items[j].scale = 1; //鍙栧€艰寖鍥�0.6 ~ 3\n                    self.items[j].fontsize = 16;\n                    self.items[j].alpha = 1;\n                    self.items[j].element.style.zIndex = 99;\n                }else{\n                    var per = self.depth / (self.depth + rz2);\n                    self.items[j].x = rx2;\n                    self.items[j].y = ry2;\n                    self.items[j].z = rz2;\n\n                    self.items[j].scale = per; //鍙栧€艰寖鍥�0.6 ~ 3\n                    self.items[j].fontsize = Math.ceil(per * 2) + self.fontsize - 6;\n                    self.items[j].alpha = 1.5 * per - 0.5;\n                    self.items[j].element.style.zIndex = Math.ceil(per*10-5);\n                }\n                //self.items[j].element.style.fontSize = self.items[j].fontsize + \"px\";//瀛椾綋鍙樺ぇ灏�\n                self.items[j].element.style.left = self.items[j].x + (self.box.offsetWidth - self.items[j].offsetWidth) / 2 + \"px\";\n                self.items[j].element.style.top = self.items[j].y + (self.box.offsetHeight - self.items[j].offsetHeight) / 2 + \"px\";\n                self.items[j].element.style.filter = \"alpha(opacity=\" + 100 * self.items[j].alpha + \")\";\n                self.items[j].element.style.opacity = self.items[j].alpha;\n            }\n        },\n\n        _getItems: function () {\n            var self = this,\n                items = [],\n                element = self.box.children, // children 鍏ㄩ儴鏄疎lement\n                length = element.length,\n                item;\n\n            for (var i = 0; i < length; i++) {\n                item = {};\n                item.angle = {};\n                item.angle.phi = Math.acos(-1 + (2 * i + 1) / length);\n                item.angle.theta = Math.sqrt((length + 1) * Math.PI) * item.angle.phi;\n                item.element = element[i];\n                item.offsetWidth = item.element.offsetWidth;\n                item.offsetHeight = item.element.offsetHeight;\n                item.x = self.radius * 1.5 * Math.cos(item.angle.theta) * Math.sin(item.angle.phi);\n                item.y = self.radius * 1.5 * Math.sin(item.angle.theta) * Math.sin(item.angle.phi);\n                item.z = self.radius * 1.5 * Math.cos(item.angle.phi);\n                item.element.style.left = item.x + (self.box.offsetWidth - item.offsetWidth) / 2 + \"px\";\n                item.element.style.top = item.y + (self.box.offsetHeight - item.offsetHeight) / 2 + \"px\";\n                items.push(item);\n            }\n\n            return items;   //鍗曞厓绱犳暟缁�\n        }\n\n\n\n    };\n\n    if (!doc.querySelectorAll) {//ie7涓嶆敮鎸乹uerySelectorAll锛屾墍浠ヨ閲嶆柊瀹氫箟\n        doc.querySelectorAll = function (selectors) {\n            var style = doc.createElement('style'), elements = [], element;\n            doc.documentElement.firstChild.appendChild(style);\n            doc._qsa = [];\n\n            style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';\n            window.scrollBy(0, 0);\n            style.parentNode.removeChild(style);\n\n            while (doc._qsa.length) {\n                element = doc._qsa.shift();\n                element.style.removeAttribute('x-qsa');\n                elements.push(element);\n            }\n            doc._qsa = null;\n            return elements;\n        };\n    }\n\n    return function (options) { // factory\n        options = options || {}; // 鐭矾璇硶\n        var selector = options.selector || '.tagcloud', //榛樿閫夋嫨class涓簍agcloud鐨勫厓绱�\n            elements = doc.querySelectorAll(selector),\n            instance = [];\n        for (var index = 0, len = elements.length; index < len; index++) {\n            options.element = elements[index];\n            if (!!TagCloud._set(options.element)) {\n                instance.push(new TagCloud(options));\n            }\n        }\n        return instance;\n    };\n\n})(window, document);\n","code":"'use strict';\n\nwindow.tagcloud = function (win, doc) {\n    function isObject(obj) {\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    function TagCloud(options) {\n        var self = this;\n\n        self.config = TagCloud._getConfig(options);\n        self.box = self.config.element;\n        self.fontsize = self.config.fontsize;\n        self.radius = self.config.radius;\n        self.depth = 2 * self.radius;\n        self.size = 2 * self.radius;\n\n        self.mspeed = TagCloud._getMsSpeed(self.config.mspeed);\n        self.ispeed = TagCloud._getIsSpeed(self.config.ispeed);\n        self.items = self._getItems();\n\n        self.direction = self.config.direction;\n        self.keep = self.config.keep;\n        self.active = false;\n        self.lasta = 1;\n        self.lastb = 1;\n        self.mouseX0 = self.ispeed * Math.sin(self.direction * Math.PI / 180);\n        self.mouseY0 = -self.ispeed * Math.cos(self.direction * Math.PI / 180);\n        self.mouseX = self.mouseX0;\n        self.mouseY = self.mouseY0;\n        self.index = -1;\n\n        TagCloud._on(self.box, 'mouseover', function () {\n            self.active = true;\n        });\n\n        TagCloud._on(self.box, 'mouseout', function () {\n            self.active = false;\n        });\n\n        TagCloud._on(self.keep ? win : self.box, 'mousemove', function (ev) {\n            var oEvent = win.event || ev;\n            var boxPosition = self.box.getBoundingClientRect();\n            self.mouseX = (oEvent.clientX - (boxPosition.left + self.box.offsetWidth / 2)) / 5;\n            self.mouseY = (oEvent.clientY - (boxPosition.top + self.box.offsetHeight / 2)) / 5;\n        });\n\n        for (var j = 0, len = self.items.length; j < len; j++) {\n            self.items[j].element.index = j;\n\n            self.items[j].element.onmouseover = function () {\n                self.index = this.index;\n            };\n\n            self.items[j].element.onmouseout = function () {\n                self.index = -1;\n            };\n        }\n\n        TagCloud.boxs.push(self.box);\n        self.update(self);\n        self.box.style.visibility = \"visible\";\n        self.box.style.position = \"relative\";\n        self.box.style.minHeight = 1.2 * self.size + \"px\";\n        self.box.style.minWidth = 2.5 * self.size + \"px\";\n        for (var j = 0, len = self.items.length; j < len; j++) {\n            self.items[j].element.style.position = \"absolute\";\n            self.items[j].element.style.zIndex = j + 1;\n        }\n        self.up = setInterval(function () {\n            self.update(self);\n        }, 10);\n    }\n\n    TagCloud.boxs = [];\n    TagCloud._set = function (element) {\n        if (TagCloud.boxs.indexOf(element) == -1) {\n            return true;\n        }\n    };\n\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (elt) {\n            var len = this.length >>> 0;\n            var from = Number(arguments[1]) || 0;\n            from = from < 0 ? Math.ceil(from) : Math.floor(from);\n            if (from < 0) from += len;\n\n            for (; from < len; from++) {\n                if (from in this && this[from] === elt) return from;\n            }\n            return -1;\n        };\n    }\n\n    TagCloud._getConfig = function (config) {\n        var defaultConfig = {\n            fontsize: 16,\n            radius: 60,\n            mspeed: \"normal\",\n            ispeed: \"normal\",\n            direction: 135,\n            keep: true };\n\n        if (isObject(config)) {\n            for (var i in config) {\n                if (config.hasOwnProperty(i)) {\n                    defaultConfig[i] = config[i];\n                }\n            }\n        }\n\n        return defaultConfig;\n    };\n    TagCloud._getMsSpeed = function (mspeed) {\n        var speedMap = {\n            slow: 1,\n            normal: 3,\n            fast: 5\n        };\n        return speedMap[mspeed] || 3;\n    };\n    TagCloud._getIsSpeed = function (ispeed) {\n        var speedMap = {\n            slow: 10,\n            normal: 25,\n            fast: 50\n        };\n        return speedMap[ispeed] || 25;\n    };\n    TagCloud._getSc = function (a, b) {\n        var l = Math.PI / 180;\n\n        return [Math.sin(a * l), Math.cos(a * l), Math.sin(b * l), Math.cos(b * l)];\n    };\n\n    TagCloud._on = function (ele, eve, handler, cap) {\n        if (ele.addEventListener) {\n            ele.addEventListener(eve, handler, cap);\n        } else if (ele.attachEvent) {\n            ele.attachEvent('on' + eve, handler);\n        } else {\n            ele['on' + eve] = handler;\n        }\n    };\n\n    TagCloud.prototype = {\n        constructor: TagCloud,\n\n        update: function update() {\n            var self = this,\n                a,\n                b;\n\n            if (!self.active && !self.keep) {\n                self.mouseX = Math.abs(self.mouseX - self.mouseX0) < 1 ? self.mouseX0 : (self.mouseX + self.mouseX0) / 2;\n                self.mouseY = Math.abs(self.mouseY - self.mouseY0) < 1 ? self.mouseY0 : (self.mouseY + self.mouseY0) / 2;\n            }\n\n            a = -(Math.min(Math.max(-self.mouseY, -self.size), self.size) / self.radius) * self.mspeed;\n            b = Math.min(Math.max(-self.mouseX, -self.size), self.size) / self.radius * self.mspeed;\n\n            if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01) {\n                return;\n            }\n\n            self.lasta = a;\n            self.lastb = b;\n\n            var sc = TagCloud._getSc(a, b);\n\n            for (var j = 0, len = self.items.length; j < len; j++) {\n\n                var rx1 = self.items[j].x,\n                    ry1 = self.items[j].y * sc[1] + self.items[j].z * -sc[0],\n                    rz1 = self.items[j].y * sc[0] + self.items[j].z * sc[1];\n\n                var rx2 = rx1 * sc[3] + rz1 * sc[2],\n                    ry2 = ry1,\n                    rz2 = rz1 * sc[3] - rx1 * sc[2];\n\n                if (self.index == j) {\n\n                    self.items[j].scale = 1;\n                    self.items[j].fontsize = 16;\n                    self.items[j].alpha = 1;\n                    self.items[j].element.style.zIndex = 99;\n                } else {\n                    var per = self.depth / (self.depth + rz2);\n                    self.items[j].x = rx2;\n                    self.items[j].y = ry2;\n                    self.items[j].z = rz2;\n\n                    self.items[j].scale = per;\n                    self.items[j].fontsize = Math.ceil(per * 2) + self.fontsize - 6;\n                    self.items[j].alpha = 1.5 * per - 0.5;\n                    self.items[j].element.style.zIndex = Math.ceil(per * 10 - 5);\n                }\n\n                self.items[j].element.style.left = self.items[j].x + (self.box.offsetWidth - self.items[j].offsetWidth) / 2 + \"px\";\n                self.items[j].element.style.top = self.items[j].y + (self.box.offsetHeight - self.items[j].offsetHeight) / 2 + \"px\";\n                self.items[j].element.style.filter = \"alpha(opacity=\" + 100 * self.items[j].alpha + \")\";\n                self.items[j].element.style.opacity = self.items[j].alpha;\n            }\n        },\n\n        _getItems: function _getItems() {\n            var self = this,\n                items = [],\n                element = self.box.children,\n                length = element.length,\n                item;\n\n            for (var i = 0; i < length; i++) {\n                item = {};\n                item.angle = {};\n                item.angle.phi = Math.acos(-1 + (2 * i + 1) / length);\n                item.angle.theta = Math.sqrt((length + 1) * Math.PI) * item.angle.phi;\n                item.element = element[i];\n                item.offsetWidth = item.element.offsetWidth;\n                item.offsetHeight = item.element.offsetHeight;\n                item.x = self.radius * 1.5 * Math.cos(item.angle.theta) * Math.sin(item.angle.phi);\n                item.y = self.radius * 1.5 * Math.sin(item.angle.theta) * Math.sin(item.angle.phi);\n                item.z = self.radius * 1.5 * Math.cos(item.angle.phi);\n                item.element.style.left = item.x + (self.box.offsetWidth - item.offsetWidth) / 2 + \"px\";\n                item.element.style.top = item.y + (self.box.offsetHeight - item.offsetHeight) / 2 + \"px\";\n                items.push(item);\n            }\n\n            return items;\n        }\n\n    };\n\n    if (!doc.querySelectorAll) {\n        doc.querySelectorAll = function (selectors) {\n            var style = doc.createElement('style'),\n                elements = [],\n                element;\n            doc.documentElement.firstChild.appendChild(style);\n            doc._qsa = [];\n\n            style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';\n            window.scrollBy(0, 0);\n            style.parentNode.removeChild(style);\n\n            while (doc._qsa.length) {\n                element = doc._qsa.shift();\n                element.style.removeAttribute('x-qsa');\n                elements.push(element);\n            }\n            doc._qsa = null;\n            return elements;\n        };\n    }\n\n    return function (options) {\n        options = options || {};\n        var selector = options.selector || '.tagcloud',\n            elements = doc.querySelectorAll(selector),\n            instance = [];\n        for (var index = 0, len = elements.length; index < len; index++) {\n            options.element = elements[index];\n            if (!!TagCloud._set(options.element)) {\n                instance.push(new TagCloud(options));\n            }\n        }\n        return instance;\n    };\n}(window, document);","codeWraped":"Cube(\"/bubble.js\", [], function (module, exports, require, load, process, global) {\n\n  window.tagcloud = function (win, doc) {\n    function isObject(obj) {\n      return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n\n    function TagCloud(options) {\n      var self = this;\n\n      self.config = TagCloud._getConfig(options);\n      self.box = self.config.element;\n      self.fontsize = self.config.fontsize;\n      self.radius = self.config.radius;\n      self.depth = 2 * self.radius;\n      self.size = 2 * self.radius;\n\n      self.mspeed = TagCloud._getMsSpeed(self.config.mspeed);\n      self.ispeed = TagCloud._getIsSpeed(self.config.ispeed);\n      self.items = self._getItems();\n\n      self.direction = self.config.direction;\n      self.keep = self.config.keep;\n      self.active = false;\n      self.lasta = 1;\n      self.lastb = 1;\n      self.mouseX0 = self.ispeed * Math.sin(self.direction * Math.PI / 180);\n      self.mouseY0 = -self.ispeed * Math.cos(self.direction * Math.PI / 180);\n      self.mouseX = self.mouseX0;\n      self.mouseY = self.mouseY0;\n      self.index = -1;\n\n      TagCloud._on(self.box, 'mouseover', function () {\n        self.active = true;\n      });\n\n      TagCloud._on(self.box, 'mouseout', function () {\n        self.active = false;\n      });\n\n      TagCloud._on(self.keep ? win : self.box, 'mousemove', function (ev) {\n        var oEvent = win.event || ev;\n        var boxPosition = self.box.getBoundingClientRect();\n        self.mouseX = (oEvent.clientX - (boxPosition.left + self.box.offsetWidth / 2)) / 5;\n        self.mouseY = (oEvent.clientY - (boxPosition.top + self.box.offsetHeight / 2)) / 5;\n      });\n\n      for (var j = 0, len = self.items.length; j < len; j++) {\n        self.items[j].element.index = j;\n\n        self.items[j].element.onmouseover = function () {\n          self.index = this.index;\n        };\n\n        self.items[j].element.onmouseout = function () {\n          self.index = -1;\n        };\n      }\n\n      TagCloud.boxs.push(self.box);\n      self.update(self);\n      self.box.style.visibility = \"visible\";\n      self.box.style.position = \"relative\";\n      self.box.style.minHeight = 1.2 * self.size + \"px\";\n      self.box.style.minWidth = 2.5 * self.size + \"px\";\n      for (var j = 0, len = self.items.length; j < len; j++) {\n        self.items[j].element.style.position = \"absolute\";\n        self.items[j].element.style.zIndex = j + 1;\n      }\n      self.up = setInterval(function () {\n        self.update(self);\n      }, 10);\n    }\n\n    TagCloud.boxs = [];\n    TagCloud._set = function (element) {\n      if (TagCloud.boxs.indexOf(element) == -1) {\n        return true;\n      }\n    };\n\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function (elt) {\n        var len = this.length >>> 0;\n        var from = Number(arguments[1]) || 0;\n        from = from < 0 ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) from += len;\n\n        for (; from < len; from++) {\n          if (from in this && this[from] === elt) return from;\n        }\n        return -1;\n      };\n    }\n\n    TagCloud._getConfig = function (config) {\n      var defaultConfig = {\n        fontsize: 16,\n        radius: 60,\n        mspeed: \"normal\",\n        ispeed: \"normal\",\n        direction: 135,\n        keep: true };\n\n      if (isObject(config)) {\n        for (var i in config) {\n          if (config.hasOwnProperty(i)) {\n            defaultConfig[i] = config[i];\n          }\n        }\n      }\n\n      return defaultConfig;\n    };\n    TagCloud._getMsSpeed = function (mspeed) {\n      var speedMap = {\n        slow: 1,\n        normal: 3,\n        fast: 5 };\n\n      return speedMap[mspeed] || 3;\n    };\n    TagCloud._getIsSpeed = function (ispeed) {\n      var speedMap = {\n        slow: 10,\n        normal: 25,\n        fast: 50 };\n\n      return speedMap[ispeed] || 25;\n    };\n    TagCloud._getSc = function (a, b) {\n      var l = Math.PI / 180;\n\n      return [Math.sin(a * l), Math.cos(a * l), Math.sin(b * l), Math.cos(b * l)];\n    };\n\n    TagCloud._on = function (ele, eve, handler, cap) {\n      if (ele.addEventListener) {\n        ele.addEventListener(eve, handler, cap);\n      } else if (ele.attachEvent) {\n        ele.attachEvent('on' + eve, handler);\n      } else {\n        ele['on' + eve] = handler;\n      }\n    };\n\n    TagCloud.prototype = {\n      constructor: TagCloud,\n\n      update: function update() {\n        var self = this,\n        a,\n        b;\n\n        if (!self.active && !self.keep) {\n          self.mouseX = Math.abs(self.mouseX - self.mouseX0) < 1 ? self.mouseX0 : (self.mouseX + self.mouseX0) / 2;\n          self.mouseY = Math.abs(self.mouseY - self.mouseY0) < 1 ? self.mouseY0 : (self.mouseY + self.mouseY0) / 2;\n        }\n\n        a = -(Math.min(Math.max(-self.mouseY, -self.size), self.size) / self.radius) * self.mspeed;\n        b = Math.min(Math.max(-self.mouseX, -self.size), self.size) / self.radius * self.mspeed;\n\n        if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01) {\n          return;\n        }\n\n        self.lasta = a;\n        self.lastb = b;\n\n        var sc = TagCloud._getSc(a, b);\n\n        for (var j = 0, len = self.items.length; j < len; j++) {\n\n          var rx1 = self.items[j].x,\n          ry1 = self.items[j].y * sc[1] + self.items[j].z * -sc[0],\n          rz1 = self.items[j].y * sc[0] + self.items[j].z * sc[1];\n\n          var rx2 = rx1 * sc[3] + rz1 * sc[2],\n          ry2 = ry1,\n          rz2 = rz1 * sc[3] - rx1 * sc[2];\n\n          if (self.index == j) {\n\n            self.items[j].scale = 1;\n            self.items[j].fontsize = 16;\n            self.items[j].alpha = 1;\n            self.items[j].element.style.zIndex = 99;\n          } else {\n            var per = self.depth / (self.depth + rz2);\n            self.items[j].x = rx2;\n            self.items[j].y = ry2;\n            self.items[j].z = rz2;\n\n            self.items[j].scale = per;\n            self.items[j].fontsize = Math.ceil(per * 2) + self.fontsize - 6;\n            self.items[j].alpha = 1.5 * per - 0.5;\n            self.items[j].element.style.zIndex = Math.ceil(per * 10 - 5);\n          }\n\n          self.items[j].element.style.left = self.items[j].x + (self.box.offsetWidth - self.items[j].offsetWidth) / 2 + \"px\";\n          self.items[j].element.style.top = self.items[j].y + (self.box.offsetHeight - self.items[j].offsetHeight) / 2 + \"px\";\n          self.items[j].element.style.filter = \"alpha(opacity=\" + 100 * self.items[j].alpha + \")\";\n          self.items[j].element.style.opacity = self.items[j].alpha;\n        }\n      },\n\n      _getItems: function _getItems() {\n        var self = this,\n        items = [],\n        element = self.box.children,\n        length = element.length,\n        item;\n\n        for (var i = 0; i < length; i++) {\n          item = {};\n          item.angle = {};\n          item.angle.phi = Math.acos(-1 + (2 * i + 1) / length);\n          item.angle.theta = Math.sqrt((length + 1) * Math.PI) * item.angle.phi;\n          item.element = element[i];\n          item.offsetWidth = item.element.offsetWidth;\n          item.offsetHeight = item.element.offsetHeight;\n          item.x = self.radius * 1.5 * Math.cos(item.angle.theta) * Math.sin(item.angle.phi);\n          item.y = self.radius * 1.5 * Math.sin(item.angle.theta) * Math.sin(item.angle.phi);\n          item.z = self.radius * 1.5 * Math.cos(item.angle.phi);\n          item.element.style.left = item.x + (self.box.offsetWidth - item.offsetWidth) / 2 + \"px\";\n          item.element.style.top = item.y + (self.box.offsetHeight - item.offsetHeight) / 2 + \"px\";\n          items.push(item);\n        }\n\n        return items;\n      } };\n\n\n\n    if (!doc.querySelectorAll) {\n      doc.querySelectorAll = function (selectors) {\n        var style = doc.createElement('style'),\n        elements = [],\n        element;\n        doc.documentElement.firstChild.appendChild(style);\n        doc._qsa = [];\n\n        style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';\n        window.scrollBy(0, 0);\n        style.parentNode.removeChild(style);\n\n        while (doc._qsa.length) {\n          element = doc._qsa.shift();\n          element.style.removeAttribute('x-qsa');\n          elements.push(element);\n        }\n        doc._qsa = null;\n        return elements;\n      };\n    }\n\n    return function (options) {\n      options = options || {};\n      var selector = options.selector || '.tagcloud',\n      elements = doc.querySelectorAll(selector),\n      instance = [];\n      for (var index = 0, len = elements.length; index < len; index++) {\n        options.element = elements[index];\n        if (!!TagCloud._set(options.element)) {\n          instance.push(new TagCloud(options));\n        }\n      }\n      return instance;\n    };\n  }(window, document);return module.exports;});","sourceMap":null,"modifyTime":1589353030624,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":[],"requiresOrigin":[],"debugInfo":[],"requiresArgsRefer":[]}